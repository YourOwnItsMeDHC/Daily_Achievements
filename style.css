* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;  /* So, here in the entire web application, we will be able to use width and height */
}

body {
    background-color: #292524;
    color: #fafaf9;
    font-family: "Sono", sans-serif;
    padding: 48px 64px;
}


.container {
    max-width: 1500px;
    margin: 0 auto;
    /* Whenever there is enough of space to display 1000 pixels, then the element will take that width */
    /* But, if there is not enough of space, then the element will simply take the available width */
}


/* Main Layout */

.header {
    margin-bottom: 2.5rem;  /* 40px */
    
    padding: 10px;

    display: flex;
    align-items: center;
    justify-content: space-between;
}


.fact-form {
    background-color: #44403c;
    margin-bottom: 2.5rem;  /* 40px */
    padding: 1rem 2.5rem;  /* 16px 40px */
}


.main {
    display: grid;
    grid-template-columns: 15.625rem 1fr;  /* 250px 1fr */
    gap: 3rem;  /* 48px */
}





/* Elements */

.logo {
    display: flex;
    align-items: center;
    gap: 1rem;  /* 16px  ==> Gap between our logo and the heading */ 
}


.log-trans:hover {
    color:antiquewhite;
    transition: 2s ease-in;
    transform: skew(25deg);      /* https://www.w3schools.com/cssref/css3_pr_transform.php */
}

/* CSS Combinators ==> descendant selector (space)  ==> https://www.w3schools.com/css/css_combinators.asp */
.logo img {
    width: 4.25rem;  /* 68px */
    height: 4.25rem;  /* 68px */
}

.logo img:hover {
    transform: scale(110%) rotate(340deg);
    /* scale(110%) ==> make the size of button 110% bigger */
}


h1 {
    font-size: 2.625rem;  /* 42 px*/
    text-transform: upercase;
    font-family: "Coiny", sans-serif;

    line-height: 1;
    margin-top: 0.375rem;  /* 6px */
}

.category {
    margin-bottom: 1rem;  /* 16px */
}

.fact {
    font-size: 1.25rem;  /* 20px */
    line-height: 1.4;  /* Gap between each line is 140% */
    font-family: "Sono", sans-serif;
    background-color: #44403c;
    margin-bottom: 1rem;  /* 16px */
    padding: 1rem 1.5rem;  /* 16px 24px */

    display: flex;
    align-items: center;
    gap: 1.5rem;  /* 24px */

    letter-spacing: -1;
}

.tag {
    text-transform: uppercase;
    font-size: 0.875rem;  /* 14px */
    font-family: "Coiny", sans-serif;
    color: #fafaf9;
    padding-top: 0.188rem;  /* 3px */
    padding-left: 0.625rem;  /* 10px */
    padding-right: 0.625rem;  /* 10px */

    border-radius: 100px;  /* https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius */
}

.vote-buttons {
    margin-left: auto;
    
    /* It will automatically adjusts margin from left, for the reaction buttons i.e. it will jsut simply stick towards right side */
}

ul {
    list-style: none;
}





/* Must Visit : https://www.w3schools.com/css/css_pseudo_classes.asp 
A pseudo-class is used to define a special state of an element.

For example, it can be used to:

Style an element when a user mouses over it
Style visited and unvisited links differently
Style an element when it gets focus */


/* Below CSS will only be applied to anchor tag which is having href as an attribute i.e. link
and it is also having the class with the name "source"
And, if there is anchor without href, then below CSS would not applied to that */
/* .source:link {
    color: red;
} */

/* But below CSS will be applied to any element (<a>, <h1>, <p>,...) having the class with the name "source" */
/* .source:visited {
    color: purple;
} */

/* .source:hover {
    color: #3b82f6;
}

.source:active {
    color: green;
} */


.source:link, .source:visited {
    color: #a8a29e;
    text-decoration: none;  /* To remove underline, which are below the link */
    margin-left: 0.75rem;  /* 12px */
    transition: 1s ease-in; 
    /* Time delay from grey to blue i.e. when moving from normal state to the hovering state */
    /* Must Visit : https://www.w3schools.com/css/css3_transitions.asp */
}

.source:hover, .source:active {
    color: #3b82f6;
}

/* ********************************************************************************* */
/* <!-- ****************************** CSS Grid *******************************  --> */
/* ********************************************************************************* */

.test {
    background-color: green;
    margin: 100px;

    display: grid;
    grid-template-columns: 100px 200px 50px; /* Number of columns and the size of each */
    grid-template-rows: 100px 300px;  /* Height of each cell */
    /* Here, 100px will be the height for cells which are at first row */
    /* Here, 300px will be the height for cells which are at second row */

    column-gap: 30px;  /* Gap between each cell with respect to column */
    row-gap: 50px;  /* Gap between each cell with respect to row */

    /* Fractional unit (fr) : https://www.digitalocean.com/community/tutorials/css-css-grid-layout-fr-unit
With CSS Grid Layout, we get a new flexible unit: the Fr unit. Fr is a fractional unit and 1fr is for 1 part of the available space. The following are a few examples of the fr unit at work.  */

grid-template-columns: 100px 20px 1fr;  /* Here, 1fr will occupy rest of the space */

/* Below all the column's width is 1fr, hence they are equally sized coulmns */
grid-template-columns: 1fr 1fr 1fr;

/* Middle column will be double in size as compared to the first and third column */
grid-template-columns: 1fr 2fr 1fr;

/* Mixed Units : https://www.digitalocean.com/community/tutorials/css-css-grid-layout-fr-unit#mixed-units */
grid-template-columns: 100px 20% 1fr;
}

.child {
    background-color: red;
    font-size: 30px;
}

/* ********************************************************************************* */
/* <!-- ****************************** CSS Grid *******************************  --> */
/* ********************************************************************************* */


.btn {
    border: none;
    font-family: "Coiny", sans-serif;
    line-height: 1;
    text-transform: uppercase;
    font-size: 1.063rem;  /* 17px */
    padding: 1rem 0 0.813rem;  /* Top LeftRight Bottom */ /* 16px 0 13px */

    /* Linear Gradient : https://www.w3schools.com/css/css3_gradients.asp */
    /* CSS gradients let you display smooth transitions between two or more specified colors.

CSS defines three types of gradients:

Linear Gradients (goes down/up/left/right/diagonally)
Radial Gradients (defined by their center)
Conic Gradients (rotated around a center point) */

    background-image: linear-gradient(135deg, #3b82f6, #ef4444, #16a34a, #eab308);
    color: inherit;

    /* Whatever the effects which we are adding to these button, has to be done in the below specified(transition) time span i.e. 0.3 seconds */
    transition: 0.3s;

    border-radius: 100px;  /* https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius */
}

.btn:hover {
    transform: scale(110%) rotate(-2deg);
    /* scale(110%) ==> make the size of button 110% bigger */
    /* rotate(-2deg) ==> Rotate the button by 2 degrees from the left side*/
    /* rotate(2deg) ==> Rotate the button by 2 degrees from the right side*/
}

.btn-large {
    font-size: 1.25rem;  /* 20px */
    padding: 1.25rem 2rem 1.063rem;  /* Top LeftRight Bottom */ /* 20px 32px 17px */
}

.btn-all-categories {
    margin-bottom: 1rem;  /* 16px */
    width: 100%;
}

.btn-category {
    width: 100%;
    background-image: none;
}